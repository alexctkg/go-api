definitions:
  models.DefaultError:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  models.DefaultSuccess:
    properties:
      messages:
        items:
          type: string
        type: array
    type: object
  models.ResProduct:
    properties:
      code:
        type: integer
      codeExtUse:
        type: integer
      codeIntUse:
        type: integer
      costumerCpfCnpj:
        type: integer
      costumerEmail:
        type: string
      costumerType:
        description: 0 cpf 1 cnpj
        type: integer
      dateDel:
        type: string
      dateIns:
        type: string
      dateUpdt:
        type: string
      status:
        type: integer
      statusReason:
        type: string
    type: object
  requests.EntExternalUserStore:
    properties:
      cnpj:
        type: string
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      razao_social:
        type: string
    required:
    - cnpj
    - email
    - password
    - razao_social
    type: object
  requests.EntSuperUserStore:
    properties:
      cnpj:
        type: string
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      razao_social:
        type: string
    required:
    - email
    - password
    type: object
  requests.EntUsersLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.ResProduct:
    properties:
      code:
        type: integer
      costumermid_cpf_cnpj:
        description: 0 cpf 1 cnpj
        type: string
      costumermid_email:
        type: string
      costumermid_type:
        type: integer
    required:
    - costumermid_cpf_cnpj
    - costumermid_email
    type: object
  requests.ResProductResponse:
    properties:
      code:
        type: integer
      reason:
        type: string
    required:
    - code
    - reason
    type: object
info:
  contact: {}
  license: {}
paths:
  /admin/aprove:
    put:
      consumes:
      - application/json
      description: aprove activation
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.ResProductResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DefaultSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Update product aprove
      tags:
      - Product
  /admin/index:
    get:
      description: Get a products list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Select product by status 0- pending 1-accepted 2-rejected
        in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResProduct'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - ApiKeyAuth: []
      summary: Index products
      tags:
      - Product
  /admin/reject:
    put:
      consumes:
      - application/json
      description: reject activation
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.ResProductResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DefaultSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - ApiKeyAuth: []
      summary: Update product rejected
      tags:
      - Product
  /external/index:
    get:
      description: Get a externalapp products list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Select product by status 0- pending 1-accepted 2-rejected
        in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResProduct'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - ApiKeyAuth: []
      summary: Index products
      tags:
      - Product
  /external/product:
    post:
      consumes:
      - application/json
      description: issue product activation
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.ResProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DefaultSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      security:
      - ApiKeyAuth: []
      summary: Create issue product activation
      tags:
      - Product
  /externalapp:
    post:
      consumes:
      - application/json
      description: Create a external user, no athentication
      parameters:
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.EntExternalUserStore'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DefaultSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Create a exteraluser
      tags:
      - User
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.EntUsersLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: Autentication
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Login
      tags:
      - Login
  /superuser:
    post:
      consumes:
      - application/json
      description: Create a super user, no athentication
      parameters:
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/requests.EntSuperUserStore'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DefaultSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.DefaultError'
      summary: Create a superuser
      tags:
      - User
swagger: "2.0"
